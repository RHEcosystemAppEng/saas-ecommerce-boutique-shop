apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-backend
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: tenant-manager-backend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-backend
    spec:
      serviceAccountName: tenant-controller-sa
      containers:
        - name: tenant-manager-backend
          image: {{ .Values.backend.containerImagePath }}
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: true
          env:
            - name: DBHOST
              value: tenant-controller-db-service
            - name: DBUSER
              value: {{ .Values.database.username }}
            - name: DBPASSWORD
              valueFrom:
                secretKeyRef:
                  name: tenant-controller-mysql-password
                  key: MYSQL_PASSWORD
          volumeMounts:
            - mountPath: /usr/app/boutique_files
              name: provisioner-templates
              readOnly: false
{{- $tiers := list "free" "gold" "silver" "premium" }}
{{- range $tiers }}
{{- $tier := . }}
            - mountPath: {{ printf "/usr/app/boutique_files/%s" $tier }}
              name: {{ printf "provisioner-%s-templates" $tier }}
              readOnly: false
{{- end }}
      volumes:
        - configMap:
            defaultMode: 0555
            name: boutique-files-configmap
            optional: false
          name: provisioner-templates
{{- $tiers := list "free" "gold" "silver" "premium" }}
{{- range $tiers }}
{{- $tier := . }}
        - configMap:
            defaultMode: 0444
            name: {{ printf "boutique-files-%s-configmap" $tier }}
            optional: false
          name: {{ printf "provisioner-%s-templates" $tier }}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-frontend
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: tenant-manager-frontend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-frontend
    spec:
      containers:
        - name: tenant-manager-frontend
          image: {{ .Values.frontend.containerImagePath }}
          imagePullPolicy: Always
          env:
          - name: REACT_APP_BACKEND_URI
{{- $route := "UNKNOWN" }}
{{- $cluster := lookup "config.openshift.io/v1" "Ingress" "" "cluster" }}
{{- if hasKey $cluster "spec"  }}
  {{- if hasKey $cluster.spec "domain" }}
    {{- $domain := $cluster.spec.domain }}
    {{- $route =  printf  "https://tenant-controller-route-%s.%s" $.Values.namespace.name $domain }}
  {{- end }}
{{- end }}
            value: {{ $route }}
