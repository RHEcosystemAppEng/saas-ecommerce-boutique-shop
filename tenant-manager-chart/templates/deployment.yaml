apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-backend
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: tenant-manager-backend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-backend
    spec:
      serviceAccountName: tenant-controller-sa
      containers:
        - name: tenant-manager-backend
          image: {{ .Values.backend.containerImagePath }}
          imagePullPolicy: Always
          securityContext:
            allowPrivilegeEscalation: true
          env:
            - name: DBHOST
              value: tenant-controller-db-service
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tenant-controller-mysql-password
                  key: MYSQL_ROOT_PASSWORD
          volumeMounts:
            - mountPath: /usr/app/boutique_files
              name: provisioner-templates
              readOnly: false
      volumes:
        - configMap:
            defaultMode: 438
            name: boutique-files-configmap
            optional: false
          name: provisioner-templates

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-frontend
  namespace: {{ .Values.namespace.name }}
  labels:
    app.kubernetes.io/name: tenant-manager-frontend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-frontend
    spec:
      serviceAccountName: nginx-sa
      containers:
        - name: tenant-manager-frontend
          image: {{ .Values.frontend.containerImagePath }}
          imagePullPolicy: Always
