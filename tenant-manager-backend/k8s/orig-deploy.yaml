kind: Namespace
apiVersion: v1
metadata:
  name: saas-boutique

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: tenant-controller-sa
  namespace: saas-boutique

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tenant-controller-role
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - pods
      - deployments
    verbs:
      - get
      - list
      - create
      - delete
      - update
      - watch

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tenant-controller-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: tenant-controller-role
subjects:
  - kind: ServiceAccount
    name: tenant-controller-sa
    namespace: saas-boutique

---

apiVersion: v1
kind: Secret
metadata:
  name: tenant-controller-mysql-password
  namespace: saas-boutique
type: opaque
stringData:
  MYSQL_ROOT_PASSWORD: redhat

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tenant-controller-mysql-db
  namespace: saas-boutique
spec:
  selector:
    matchLabels:
      app: mysql
  serviceName: "mysql"
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mysql
          image: mysql:5.7
          args:
            - "--ignore-db-dir=lost+found"
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-store
              mountPath: /var/lib/mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tenant-controller-mysql-password
                  key: MYSQL_ROOT_PASSWORD
  volumeClaimTemplates:
    - metadata:
        name: mysql-store
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 2Gi

---

apiVersion: v1
kind: Service
metadata:
  name: tenant-controller-db-service
  namespace: saas-boutique
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-backend
  namespace: saas-boutique
  labels:
    app.kubernetes.io/name: tenant-manager-backend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-backend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-backend
    spec:
      serviceAccountName: tenant-controller-sa
      containers:
        - name: tenant-manager-backend
          image: quay.io/jnirosha/tenant-manager-backend:latest
          imagePullPolicy: Always
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: tenant-controller-mysql-password
                  key: MYSQL_ROOT_PASSWORD

---

apiVersion: v1
kind: Service
metadata:
  name: tenant-controller-service
  namespace: saas-boutique
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: tenant-manager-backend
  ports:
    - protocol: TCP
      name: tenant-backend-port
      port: 80
      targetPort: 8081

---

kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: tenant-controller-route
  namespace: saas-boutique
spec:
  to:
    kind: Service
    name: tenant-controller-service
  port:
    targetPort: tenant-backend-port
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
  wildcardPolicy: None

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-sa
  namespace: saas-boutique
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: 'nginx-anyuid'
subjects:
  - kind: ServiceAccount
    name: nginx-sa
    namespace: saas-boutique
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:openshift:scc:anyuid'

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: tenant-manager-frontend
  namespace: saas-boutique
  labels:
    app.kubernetes.io/name: tenant-manager-frontend
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: tenant-manager-frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tenant-manager-frontend
    spec:
      serviceAccountName: nginx-sa
      containers:
        - name: tenant-manager-frontend
          image: quay.io/jnirosha/tenant-manager-frontend:latest
          imagePullPolicy: Always
          env:
            - name: REACT_APP_BACKEND_URI
              value: https://tenant-controller-route-saas-boutique.apps.mw-ocp4.cloud.lab.eng.bos.redhat.com

---

apiVersion: v1
kind: Service
metadata:
  name: tenant-frontend-service
  namespace: saas-boutique
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: tenant-manager-frontend
  ports:
    - protocol: TCP
      name: tenant-manager-frontend-port
      port: 80
      targetPort: 8080

---

kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: tenant-frontend-route
  namespace: saas-boutique
spec:
  to:
    kind: Service
    name: tenant-frontend-service
  port:
    targetPort: tenant-manager-frontend-port
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
  wildcardPolicy: None
