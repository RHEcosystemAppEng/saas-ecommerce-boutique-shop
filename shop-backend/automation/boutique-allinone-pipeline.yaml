kind: "BuildConfig"
apiVersion: "build.openshift.io/v1"
metadata:
  name: "boutique-allinone-pipeline"
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: 
        pipeline {
        def templatePath = 'https://raw.githubusercontent.com/openshift-microservices-demo/openshift-microservices/main/release/kubernetes-manifests.yaml'
        def templateName = 'boutique-allinone-pipeline'
          agent {
            node { 
              label 'nodejs'
            }
          }
          options {timeout(time:10,unit:'MINUTES')
          }
          stages {
            stage('preamble') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      echo "Using project:\$(openshift.project()}"
                    }
                  }
                }
              }
            stage('cleanup') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      openshift.selector("all", [template :templateName ]).delete()
                      if (openshift.selector("secrets", templateName).exists()) {
                        openshift.selector("secrets", templateName).delete()
                      }
                    }
                  }
                }
              }
            }
            stage('create') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      openshift.newApp(templatePath)
                    }
                  }
                }
              }
            }
            stage('build') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject() {
                      def builds = openshift.selector("bc", templateName.related('builds')
                      timeout(5) {
                        builds.untilEach(1) {
                          return (it.object().status.phase == "complete")
                        }
                      }
                    }
                  }
                }
              }
            }
            stage('deploy') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject90 {
                      def rm = openshift.selector("dc", templateName).rollout()
                      timeout(5) {
                        openshift.selector("dc", templateName).related('pods').untilEach(1) {
                          return (it.object().status.phase == "Running")
                        }
                      }
                    }
                  }
                }
              }
            }
          stage('tag') {
            steps {
              script {
                openshift.withCluster() {
                  openshift.withProject() {
                    openshift.tag("\${templateName}:latest", "\${templateName}-staging:latest")
                  }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
